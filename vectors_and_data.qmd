# Vectors and R Data Types

You can think of vectors as ordered sets of values. We can use the c() function (short for 'combine') to create a vector made up of the values we provide. Let's make a few different vectors

```{r}
interval_ratio_vec <- c(1.2, 3.4, 5.6, 7.1, 2.8)

ordinal_vec <- c("1-2", "5 or more", "1-2", "3-4", "5 or more") #When you want R to treat something as a character string (rather than as a command or an object of some kind), you place it in quotations.

nominal_vec <- c("east", "west", "south", "south", "north") 

logical_vec <- c(TRUE, FALSE, TRUE, FALSE, FALSE) #upper-case 'true' and 'false' have fixed values in R and, when used without quotes, will refer to these pre-defined logical values
```

These 4 objects represent the different types of vectors that we'll most commonly encounter. Note that you may also see the term 'dbl' or 'double', for example:

```{r}
typeof(interval_ratio_vec) # the typeof() function can be used to check what data-type a given object is
```

The reason is a little esoteric, but just note that you can treat these 'double' or 'dbl' data-types as being numeric for our purposes.

Numeric data will generally correspond with our interval-ratio variables. Numbers are usually processed as numeric type in R by default.

Character data types will typically align with ordinal and nominal variables.

We probably won't make much use of logical vectors for our analyses, but it's likely you'll run into them and they're one of the basic data types in R. They can be useful for a variety of data-sorting processes.

Many R functions will respond differently to different data types, so it's important to keep these in mind when you need to troubleshoot errors.

Take the mean() function, for example. As the name implies, this function will return the arithmetic mean of a numeric vector. Let's give it the one we just made above:

```{r}
mean(interval_ratio_vec)
```

Note that it gives the same response as if we had manually calculated it. Functions can make our lives a lot easier with larger amounts of data, but always make sure you're familiar with what's going on under the hood of any given function.

```{r}
(1.2+3.4+5.6+7.1+2.8)/5
```

But, what happens when we run the following command?

```{r}
mean(nominal_vec)
```

It doesn't make any sense to take the mean of the cardinal directions, so it will throw a warning message. We need a variable that can be represented numerically. Note that mean() also accepts logical variables, as, in R, TRUEs will be counted as 1s and FALSEs will be counted as 0s. In this case, you will be getting the proportion of true responses

```{r}
mean(logical_vec)

(1+0+1+0+0)/5
```
