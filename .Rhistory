p_id = p_id_vec,
dog_size = ordinal_vec,
side_of_town = character_vec,
food_per_day = num_vec,
has_a_labrador = logical_vec
)
#Take a look at our new data frame by clicking on the object in our Environment window at the upper right, or by running the following command. Both do the same thing
View(our_df)
#Once we have created a data frame, we can refer to individual variables with the $ operator in R
our_df$food_per_day
mean(our_df$food_per_day)
#We can look at some basic characteristics of the data frame with the summary() function. Note that it will return different information depending on the data type of the variable
summary(our_df)
#We can turn this variable into a factor variable with base R's as.factor() function.
our_df$side_of_town <- as.factor(our_df$side_of_town)
#Check the summary() output again and notice how the output is reported now
summary(our_df)
our_df$dog_size <- factor(
our_df$dog_size,
levels=c("small", "medium", "large"),
ordered = TRUE
)
#Take a look back at the summary. Now, instead of 5 separate character strings, we can see the breakdown of how many people own a certain number of dogs.
summary(our_df)
str(our_df)
#After it's done installing, go back and run the library(tidyverse) command again.
library(tidyverse)
#Let's use this subset to explore some tidyverse functionality.
sex_inc <- select(our_gss, id, sex, realrinc)
summary(sex_inc)
fem_inc <- filter(sex_inc, sex=="female")
mean_inc <- summarise(our_gss, "mean_inc"=mean(realrinc, na.rm=TRUE))
View(mean_inc)
our_gss <- group_by(our_gss, partyid)
mean_inc <- summarize(
our_gss,
"mean_inc" = mean(realrinc, na.rm = TRUE)
)
View(mean_inc)
mean_inc <- summarise(our_gss, "mean_inc"=mean(realrinc, na.rm=TRUE))
our_gss <- group_by(our_gss, partyid)
grouped_mean_inc <- summarize(
our_gss,
"mean_inc" = mean(realrinc, na.rm = TRUE)
)
mean_inc
sexpol_means <- our_gss |>
select(id, sex, realrinc, partyid) |>
group_by(sex, partyid) |>
summarize("mean_inc" = mean(realrinc, na.rm=TRUE)) |>
drop_na(sex, partyid)
View(sexpol_means)
library(tidyverse)
library(hrbrthemes)
library(scales)
library(wesanderson)
library(sysfonts)
sysfonts::font_add_google("Roboto Condensed")
sysfonts::font_add("Arial Narrow", regular = "ARIALN.ttf")
ndist <- rnorm(10000)
d <- data.frame(x = 1:length(ndist), y = ndist)
ggplot(d, aes(y)) +
geom_histogram(binwidth = .1) +
geom_vline(aes(xintercept = mean(y), color = "mean")) +
geom_vline(aes(xintercept = median(y), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
theme_ft_rc() +
labs(
title = "Normal distribution; n = 10,000",
x = "Response value",
y = "Frequency"
)
library(sysfonts)
sysfonts::font_add_google("Roboto Condensed")
sysfonts::font_add("Arial Narrow", regular = "ARIALN.ttf")
library(showtext)
library(hrbrthemes)
library(tidyverse)
library(scales)
library(wesanderson)
showtext.auto()
ndist <- rnorm(10000)
d <- data.frame(x = 1:length(ndist), y = ndist)
ggplot(d, aes(y)) +
geom_histogram(binwidth = .1) +
geom_vline(aes(xintercept = mean(y), color = "mean")) +
geom_vline(aes(xintercept = median(y), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
theme_ft_rc() +
labs(
title = "Normal distribution; n = 10,000",
x = "Response value",
y = "Frequency"
)
ggplot(d, aes(y)) +
geom_histogram(binwidth = .1) +
geom_vline(aes(xintercept = mean(y), color = "mean")) +
geom_vline(aes(xintercept = median(y), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
theme_ft_rc() +
labs(
title = "Normal distribution; n = 10,000",
x = "Response value",
y = "Frequency"
)
example <- our_gss
load("our_gss.rda")
example <- our_gss
breaks <- pretty(range(example$realrinc, na.rm = TRUE),
n = nclass.Sturges(example$realrinc),
min.n = 1)
ggplot(our_gss, aes(realrinc)) +
geom_histogram(breaks = breaks) +
geom_vline(aes(xintercept = mean(realrinc, na.rm = TRUE), color = "mean")) +
geom_vline(aes(xintercept = median(realrinc, na.rm = TRUE), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
theme_ft_rc() +
labs(
title = "Income distribution of 2022 GSS Respondents",
x = "Respondent's income in dollars",
y = "Frequency"
)
ggplot(our_gss, aes(realrinc)) +
geom_histogram(breaks = breaks) +
geom_vline(aes(xintercept = mean(realrinc, na.rm = TRUE), color = "mean")) +
geom_vline(aes(xintercept = median(realrinc, na.rm = TRUE), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
theme_ft_rc() +
labs(
title = "Income distribution of 2022 GSS Respondents",
x = "Respondent's income in dollars",
y = "Frequency") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
ggplot(our_gss, aes(realrinc)) +
geom_histogram(breaks = breaks) +
geom_vline(aes(xintercept = mean(realrinc, na.rm = TRUE), color = "mean")) +
geom_vline(aes(xintercept = median(realrinc, na.rm = TRUE), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
theme_ft_rc() +
labs(
title = "Income distribution of 2022 GSS Respondents",
x = "Respondent's income in dollars",
y = "Frequency") +
theme(
panel.grid.major = element_blank(),
#panel.grid.minor = element_blank()
)
ggplot(our_gss, aes(realrinc)) +
geom_histogram(breaks = breaks) +
geom_vline(aes(xintercept = mean(realrinc, na.rm = TRUE), color = "mean")) +
geom_vline(aes(xintercept = median(realrinc, na.rm = TRUE), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
theme_ft_rc() +
labs(
title = "Income distribution of 2022 GSS Respondents",
x = "Respondent's income in dollars",
y = "Frequency") +
theme(
#panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
ggplot(our_gss, aes(realrinc)) +
geom_histogram(breaks = breaks) +
geom_vline(aes(xintercept = mean(realrinc, na.rm = TRUE), color = "mean")) +
geom_vline(aes(xintercept = median(realrinc, na.rm = TRUE), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
theme_ft_rc() +
labs(
title = "Income distribution of 2022 GSS Respondents",
x = "Respondent's income in dollars",
y = "Frequency") +
theme(
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank()
)
ggplot(our_gss, aes(realrinc)) +
geom_histogram(breaks = breaks) +
geom_vline(aes(xintercept = mean(realrinc, na.rm = TRUE), color = "mean")) +
geom_vline(aes(xintercept = median(realrinc, na.rm = TRUE), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
theme_ft_rc() +
labs(
title = "Income distribution of 2022 GSS Respondents",
x = "Respondent's income in dollars",
y = "Frequency") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
ggplot(
sd_examples,
aes(value, fill = label)) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_fill_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
theme_ft_rc() +
theme(legend.title = element_blank())
high_sd <- rnorm(10000, 0, 5)
low_sd <- rnorm(10000, 0, 1)
d <- data.frame(label = "high_sd", value = high_sd)
d2 <- data.frame(label = "low_sd", value = low_sd)
sd_examples <- rbind(d, d2)
ggplot(
sd_examples,
aes(value, fill = label)) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_fill_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
theme_ft_rc() +
theme(legend.title = element_blank())
high_sd <- rnorm(10000, 0, 3)
low_sd <- rnorm(10000, 0, 1)
d <- data.frame(label = "high_sd", value = high_sd)
d2 <- data.frame(label = "low_sd", value = low_sd)
sd_examples <- rbind(d, d2)
ggplot(
sd_examples,
aes(value, fill = label)) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_fill_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
theme_ft_rc() +
theme(legend.title = element_blank())
high_sd <- rnorm(10000, 0, 4)
low_sd <- rnorm(10000, 0, 1)
d <- data.frame(label = "high_sd", value = high_sd)
d2 <- data.frame(label = "low_sd", value = low_sd)
sd_examples <- rbind(d, d2)
ggplot(
sd_examples,
aes(value, fill = label)) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_fill_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
theme_ft_rc() +
theme(legend.title = element_blank())
ggplot(
sd_examples,
aes(value, fill = label, color = label)) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_fill_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
theme_ft_rc() +
theme(legend.title = element_blank())
ggplot(
sd_examples,
aes(value, fill = label)) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_fill_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
theme_ft_rc() +
theme(legend.title = element_blank())
ggplot(
sd_examples,
aes(value, fill = label, color = "none")) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_fill_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
theme_ft_rc() +
theme(legend.title = element_blank())
ggplot(
sd_examples,
aes(value, fill = label, color = NULL)) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_fill_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
theme_ft_rc() +
theme(legend.title = element_blank())
ggplot(
sd_examples,
aes(value, fill = label)) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_fill_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
theme_ft_rc() +
theme(legend.title = element_blank())
library(datasauRus)
dino <- datasaurus_dozen
dino_mean <- dino |>
group_by(dataset) |>
summarise("mean_x" = mean(x),
"mean_y" = mean(y),
"std_x" = sd(x),
"std_y" = sd(y),
) |>
mutate_if(is.numeric, round, 1) |>
select(!dataset)
knitr::kabel(dino_mean)
knitr::kable(dino_mean)
dino_mean <- dino |>
group_by(dataset) |>
summarise("Mean (x)" = mean(x),
"Mean (y)" = mean(y),
"SD (x)" = sd(x),
"SD (y)" = sd(y),
) |>
mutate_if(is.numeric, round, 1) |>
select(!dataset)
knitr::kable(dino_mean)
dino |>
ggplot(
aes(x=x, y=y, color=dataset)) +
geom_smooth(method="lm")+
ylim(0,100)+
theme(legend.position = "none") +
facet_wrap(~dataset, nrow=3) +
theme_ft_rc()
dino |>
ggplot(
aes(x=x, y=y, color=dataset)) +
geom_smooth(method="lm") +
guides(color = "none") +
ylim(0,100)+
theme(legend.position = "none") +
facet_wrap(~dataset, nrow=3) +
theme_ft_rc()
dino |> # filter (dataset %in% c("bullseye", "star", "dino", "dots")) |>
ggplot(
aes(x=x, y=y, color=dataset)) +
geom_smooth(method="lm")+
guides(color = "none") +
ylim(0,100)+
geom_point()+
theme(legend.position = "none") +
labs(subtitle = "(Data from the R package 'datasauRus')") +
facet_wrap(~dataset, nrow=3) +
theme_ft_rc()
dino |> # filter (dataset %in% c("bullseye", "star", "dino", "dots")) |>
ggplot(
aes(x=x, y=y, color=dataset)) +
geom_smooth(method="lm")+
guides(color = "none") +
ylim(0,100)+
geom_point()+
theme(legend.position = "none") +
labs(subtitle = "(Data from the R package 'datasauRus')") +
facet_wrap(~dataset, nrow=3) +
theme_ft_rc()
dino |> # filter (dataset %in% c("bullseye", "star", "dino", "dots")) |>
ggplot(
aes(x=x, y=y, color=dataset)) +
geom_smooth(method="lm")+
guides(color = "none") +
ylim(0,100)+
geom_point()+
theme(legend.position = "none") +
labs(subtitle = "(Data from the R package 'datasauRus')") +
facet_wrap(~dataset, nrow=3) +
theme_ft_rc(
axis_text_size = 11,
axis_title_size = 14,
plot_title_size = 16
)
dino |>
ggplot(
aes(x=x, y=y, color=dataset)) +
geom_smooth(method="lm") +
guides(color = "none") +
ylim(0,100)+
theme(legend.position = "none") +
facet_wrap(~dataset, nrow=3) +
theme_ft_rc(
axis_text_size = 11,
axis_title_size = 14,
plot_title_size = 16
)
dino |>
ggplot(
aes(x=x, y=y, color=dataset)) +
geom_smooth(method="lm") +
guides(color = "none") +
ylim(0,100)+
theme(legend.position = "none") +
facet_wrap(~dataset, nrow=3) +
theme_ft_rc(
axis_text_size = 11,
axis_title_size = 14,
plot_title_size = 16) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
)
dino |> # filter (dataset %in% c("bullseye", "star", "dino", "dots")) |>
ggplot(
aes(x=x, y=y, color=dataset)) +
geom_smooth(method="lm")+
guides(color = "none") +
ylim(0,100)+
geom_point()+
theme(legend.position = "none") +
labs(subtitle = "(Data from the R package 'datasauRus')") +
facet_wrap(~dataset, nrow=3) +
theme_ft_rc(
axis_text_size = 11,
axis_title_size = 14,
plot_title_size = 16) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
)
dino |> # filter (dataset %in% c("bullseye", "star", "dino", "dots")) |>
ggplot(
aes(x=x, y=y, color=dataset)) +
geom_smooth(method="lm")+
guides(color = "none") +
ylim(0,100)+
geom_point()+
theme(legend.position = "none") +
labs(caption = "(Data from the R package 'datasauRus')") +
facet_wrap(~dataset, nrow=3) +
theme_ft_rc(
axis_text_size = 11,
axis_title_size = 14,
plot_title_size = 16) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
)
ggplot(d, aes(y)) +
geom_histogram(binwidth = .1) +
geom_vline(aes(xintercept = mean(y), color = "mean")) +
geom_vline(aes(xintercept = median(y), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
theme_ft_rc(axis_text_size = 11,
axis_title_size = 14,
plot_title_size = 16) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
labs(
title = "Normal distribution; n = 10,000",
x = "Response value",
y = "Frequency")
ndist <- rnorm(10000)
d <- data.frame(x = 1:length(ndist), y = ndist)
ggplot(d, aes(y)) +
geom_histogram(binwidth = .1) +
geom_vline(aes(xintercept = mean(y), color = "mean")) +
geom_vline(aes(xintercept = median(y), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
theme_ft_rc(axis_text_size = 11,
axis_title_size = 14,
plot_title_size = 16) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
labs(
title = "Normal distribution; n = 10,000",
x = "Response value",
y = "Frequency")
ggplot(our_gss, aes(realrinc)) +
geom_histogram(breaks = breaks) +
geom_vline(aes(xintercept = mean(realrinc, na.rm = TRUE), color = "mean")) +
geom_vline(aes(xintercept = median(realrinc, na.rm = TRUE), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
theme_ft_rc(axis_text_size = 11,
axis_title_size = 14,
plot_title_size = 16) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
labs(
title = "Income distribution of 2022 GSS Respondents",
x = "Respondent's income in dollars",
y = "Frequency") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
ggplot(
sd_examples,
aes(value, fill = label)) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_fill_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
theme_ft_rc(axis_text_size = 11,
axis_title_size = 14,
plot_title_size = 16) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
theme(legend.title = element_blank())
