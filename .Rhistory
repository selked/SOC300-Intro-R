adorn_totals(where = "row") |>
adorn_percentages() |>
adorn_pct_formatting()
# Bring the raw counts back in, so that we have both counts and percentages
our_gss |>
drop_na(cappun, dem_rep) |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
adorn_totals(where = "row") |>
adorn_percentages() |>
adorn_pct_formatting() |>
adorn_ns()
# Lastly, let's add some labels for the columns
our_gss |>
drop_na(cappun, dem_rep) |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
adorn_totals(where = "row") |>
adorn_percentages() |>
adorn_pct_formatting() |>
adorn_ns(position = "rear") |>
adorn_title(
placement = "top",
row_name = "Death Penalty Attitude",
col_name = "Political Party")
DemFav_row_total <- 426 + 633
DemFav_col_total <- 426 + 569
sample_total <- (426 + 633 + 569 + 121)
expected_DemFav <- (DemFav_row_total * DemFav_col_total) / sample_total
expected_DemFav
# Grab the expected value we just calculated
exp_val <- 602.4614
# Take the observed count, which is just the actual count we observe for that cell in our data
obs_val <- 426
# Perform the numerator operations
chi_numerator <- (obs_val - exp_val)^2
# Divide this by the expected value
chi_numerator/exp_val
our_gss |>
drop_na(cappun, dem_rep) |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
chisq.test()
our_chisq <- our_gss |>
drop_na(cappun, dem_rep) |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
chisq.test()
View(our_chisq)
format(2.2e-16, scientific = FALSE)
format(2.2e-16, scientific = FALSE)
our_gss |>
drop_na(cappun, dem_rep) |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
chisq.test()
# Set up our workspace
library(tidyverse)
library(janitor)
# If you haven't already, go back to the Moodle page and re-download 'our_gss.rda' -- I added another new variable to work with for today
load(file.choose("our_gss.rda"))
load("our_gss.rda")
View(our_gss)
# Run the following code to re-create the variable 'dem_rep'
our_gss <- our_gss |>
mutate(
partyid_recoded=fct_collapse(partyid,
"Democrat" = c("strong democrat", "not very strong democrat"),
"Republican" = c("strong republican","not very strong republican"),
"Independent" = c("independent, close to democrat", "independent (neither, no response)", "independent, close to republican"),
"Other Party" = c("other party")
)) |>
mutate(dem_rep = fct_recode(
partyid_recoded,
NULL="Other Party",
NULL="Independent"))
View(our_gss)
our_gss |>
drop_na(dem_rep, cappun) |>
tabyl(
var1 = cappun,
var2 = dem_rep
)
# Let's add a row for totals
our_gss |>
drop_na(cappun, dem_rep) |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
adorn_totals(where = "row")
# Convert counts to proportions and then convert proportions to percentages
our_gss |>
drop_na(cappun, dem_rep) |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
adorn_totals(where = "row") |>
adorn_percentages() |>
adorn_pct_formatting()
# Bring the raw counts back in, so that we have both counts and percentages
our_gss |>
drop_na(cappun, dem_rep) |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
adorn_totals(where = "row") |>
adorn_percentages() |>
adorn_pct_formatting() |>
adorn_ns()
# Lastly, let's add some labels for the columns
our_gss |>
drop_na(cappun, dem_rep) |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
adorn_totals(where = "row") |>
adorn_percentages() |>
adorn_pct_formatting() |>
adorn_ns(position = "rear") |>
adorn_title(
placement = "top",
row_name = "Death Penalty Attitude",
col_name = "Political Party")
DemFav_row_total <- 426 + 633
DemFav_col_total <- 426 + 569
sample_total <- (426 + 633 + 569 + 121)
expected_DemFav <- (DemFav_row_total * DemFav_col_total) / sample_total
expected_DemFav
# Grab the expected value we just calculated
exp_val <- 602.4614
# Take the observed count, which is just the actual count we observe for that cell in our data
obs_val <- 426
# Perform the numerator operations
chi_numerator <- (obs_val - exp_val)^2
# Divide this by the expected value
chi_numerator/exp_val
format(2.2e-16, scientific = FALSE)
our_chisq <- our_gss |>
drop_na(cappun, dem_rep) |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
chisq.test()
# This contains a bunch of information about the test as calculated by the function. You can see all the expected values, for example, which can be convenient for reviewing your data
our_chisq$expected
our_chisq$observed
our_gss |>
drop_na(dem_rep, cappun) |>
tabyl(
var1 = cappun,
var2 = dem_rep
)
our_gss |>
drop_na(dem_rep, cappun) |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = sex
)
our_gss |>
drop_na(dem_rep, cappun, sex) |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = sex
)
our_gss |>
drop_na(cappun, dem_rep, sex) |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = sex) |>
adorn_totals(where = "row") |>
adorn_percentages() |>
adorn_pct_formatting() |>
adorn_ns(position = "rear") |>
adorn_title(
placement = "top",
row_name = "Death Penalty Attitude",
col_name = "Political Party")
our_gss |>
drop_na(cappun, dem_rep, race) |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = race) |>
adorn_totals(where = "row") |>
adorn_percentages() |>
adorn_pct_formatting() |>
adorn_ns(position = "rear") |>
adorn_title(
placement = "top",
row_name = "Death Penalty Attitude",
col_name = "Political Party")
our_gss |>
drop_na(cappun, dem_rep, race) |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = race) |>
adorn_totals(where = "row") |>
adorn_percentages() |>
adorn_pct_formatting() |>
adorn_ns(position = "rear") |>
adorn_title(
placement = "top",
row_name = "Death Penalty Attitude",
col_name = "Political Party") |>
chisq.test()
our_gss |>
drop_na(cappun, dem_rep, race) |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = race) |>
chisq.test()
our_gss |>
drop_na(cappun, dem_rep, race) |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = race) |>
tabyl::chisq.test()
our_gss |>
drop_na(cappun, dem_rep, race) |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = race) |>
janitor::chisq.test()
our_gss |>
drop_na(cappun, dem_rep, race) |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = race) |>
stats::chisq.test()
our_gss |>
drop_na(cappun, dem_rep, race) |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = race) |>
chisq.test()
chisq.test()
our_gss |>
drop_na(cappun, dem_rep, race) |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = race) |>
chisq.test()
our_gss |>
drop_na(cappun, dem_rep, race) |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
chisq.test()
our_gss |>
drop_na(cappun, dem_rep, race) |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = race) |>
mantelhaen.test()
our_gss |>
drop_na(cappun, dem_rep, race) |>
as.array(tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = race)) |>
mantelhaen.test()
our_gss |>
drop_na(cappun, dem_rep, race) |>
mantelhaen.test(
x = cappun,
y = dem_rep,
z = race
)
our_gss |>
drop_na(cappun, dem_rep, race) |>
mantelhaen.test(
x = our_gss$cappun,
y = our_gss$dem_rep,
z = our_gss$race
)
our_tab <- table(our_gss$cappun, our_gss$dem_rep, our_gss$race)
our_tab
chisq.test(our_tab)
mantelhaen.test(our_tab)
our_tab <- table(our_gss$cappun, our_gss$dem_rep, our_gss$sex)
our_tab
mantelhaen.test(our_tab)
our_tab <- table(our_gss$cappun, our_gss$dem_rep, our_gss$age)
our_tab <- table(our_gss$cappun, our_gss$dem_rep, our_gss$age_ord)
our_gss <- our_gss |>
mutate(
age_ord = cut(
age,
breaks = c(18, 36, 50, Inf),
include.lowest = TRUE,
right = FALSE,
labels = c("Younger", "Middle Age", "Older"),
ordered_result = TRUE
)
)
our_tab <- table(our_gss$cappun, our_gss$dem_rep, our_gss$age_ord)
our_tab
mantelhaen.test(our_tab)
mantelhaen.test(our_tab, correct = FALSE)
# For men
our_gss |>
drop_na(cappun, dem_rep, sex) |>
filter(sex=="male") |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = sex)
# For men
our_gss |>
drop_na(cappun, dem_rep, sex) |>
filter(sex=="male") |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = sex) |>
chisq.test()
# For men
our_gss |>
drop_na(cappun, dem_rep, sex) |>
filter(sex=="male") |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
chisq.test()
# For women
our_gss |>
drop_na(cappun, dem_rep, sex) |>
filter(sex=="female") |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
chisq.test()
our_gss |>
drop_na(dem_rep, race) |>
tabyl(
var1 = dem_rep,
var2 = race) |>
chisq.test()
our_gss |>
drop_na(dem_rep, race) |>
tabyl(
var1 = dem_rep,
var2 = race)
our_gss |>
drop_na(race, dem_rep) |>
tabyl(
var1 = race,
var2 = dem_rep) |>
chisq.test()
our_gss |>
drop_na(race, dem_rep) |>
tabyl(
var1 = race,
var2 = dem_rep)
# For White
our_gss |>
drop_na(cappun, dem_rep, race) |>
filter(race=="white") |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
chisq.test()
# For Black
our_gss |>
drop_na(cappun, dem_rep, sex) |>
filter(race=="black") |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
chisq.test()
# For Black
our_gss |>
drop_na(cappun, dem_rep, sex) |>
filter(race=="black") |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
chisq.test(correct = FALSE)
# For White
our_gss |>
drop_na(cappun, dem_rep, race) |>
filter(race=="white") |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
chisq.test(correct = FALSE)
our_tab <- table(our_gss$cappun, our_gss$dem_rep, our_gss$race)
mantelhaen.test(our_tab, correct = FALSE)
our_gss <- our_gss |>
mutate(b_w = fct_recode(
NULL = "other"
))
our_gss <- our_gss |>
mutate(b_w = fct_recode(
race,
NULL = "other"
))
View(our_gss)
our_tab <- table(our_gss$cappun, our_gss$dem_rep, our_gss$bw)
our_tab <- table(our_gss$cappun, our_gss$dem_rep, our_gss$b_w)
our_tab
mantelhaen.test(our_tab, correct = FALSE)
mantelhaen.test(our_tab)
our_tab
my_mh <- mantelhaen.test(our_tab)
View(my_mh)
our_tab <- table(our_gss$cappun, our_gss$dem_rep, our_gss$age_ord)
our_tab
mantelhaen.test(our_tab)
# For Younger
our_gss |>
drop_na(cappun, dem_rep, race) |>
filter(age_ord=="Younger") |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
chisq.test(correct = FALSE)
# For Middle-Aged
our_gss |>
drop_na(cappun, dem_rep, age_ord) |>
filter(age_ord=="Middle Age") |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
chisq.test(correct = FALSE)
# For Older
our_gss |>
drop_na(cappun, dem_rep, age_ord) |>
filter(age_ord=="Older") |>
tabyl(
var1 = cappun,
var2 = dem_rep) |>
chisq.test(correct = FALSE)
our_gss |>
drop_na(cappun, dem_rep, age_ord) |>
tabyl(
var1 = cappun,
var2 = dem_rep,
var3 = age_ord) |>
adorn_totals(where = "row") |>
adorn_percentages() |>
adorn_pct_formatting() |>
adorn_ns(position = "rear") |>
adorn_title(
placement = "top",
row_name = "Death Penalty Attitude",
col_name = "Political Party")
our_mat <- as.matrix(our_tab)
View(our_mat)
our_tab
chisq.test(our_tab)
install.packages("weights")
library(weights)
wtd.chi.sq(
our_gss$cappun,
our_gss$dem_rep,
our_gss$age_ord,
na.rm = TRUE,
drop.missing.levels = TRUE
)
format(wtd.chi.sq(
our_gss$cappun,
our_gss$dem_rep,
our_gss$age_ord,
na.rm = TRUE,
drop.missing.levels = TRUE
))
wtd.chi.sq(
our_gss$cappun,
our_gss$dem_rep,
our_gss$age_ord,
na.rm = TRUE,
drop.missing.levels = TRUE
)
format(wtd.chi.sq(
our_gss$cappun,
our_gss$dem_rep,
our_gss$age_ord,
na.rm = TRUE,
drop.missing.levels = TRUE
), scientific = FALSE)
wtd.chi.sq(
our_gss$cappun,
our_gss$dem_rep,
our_gss$age_ord,
na.rm = TRUE,
drop.missing.levels = TRUE
)
my_chisq <- wtd.chi.sq(
our_gss$cappun,
our_gss$dem_rep,
our_gss$age_ord,
na.rm = TRUE,
drop.missing.levels = TRUE
)
View(my_chisq)
