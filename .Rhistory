ggplot(
aes(x=x, y=y, color=dataset)) +
geom_smooth(method="lm", linewidth = .75, se = FALSE) +
guides(color = "none") +
ylim(0,100)+
theme(legend.position = "none") +
facet_wrap(~dataset, nrow=3) +
theme_ft_rc(
base_size = 24,
axis_text_size = 24,
axis_title_size = 24,
plot_title_size = 30,
strip_text_size = 24,
axis_title_just = "lt") +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
)
dino |>
ggplot(
aes(x=x, y=y, color=dataset)) +
geom_smooth(method="lm", linewidth = .75, se = FALSE) +
guides(color = "none") +
ylim(0,100)+
theme(legend.position = "none") +
facet_wrap(~dataset, nrow=3) +
theme_ft_rc(
base_size = 24,
axis_text_size = 24,
axis_title_size = 24,
plot_title_size = 30,
strip_text_size = 24,
axis_title_just = "cc") +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
)
dino |> # filter (dataset %in% c("bullseye", "star", "dino", "dots")) |>
ggplot(
aes(x=x, y=y, color=dataset)) +
#geom_smooth(method="lm")+
guides(color = "none") +
ylim(0,100)+
geom_point(size = .5)+
theme(legend.position = "none") +
labs(caption = "(Data from the R package 'datasauRus')") +
facet_wrap(~dataset, nrow=3) +
theme_ft_rc(
base_size = 14,
axis_text_size = 20,
axis_title_size = 30,
#plot_title_size = 30,
caption_size = 16,
strip_text_size = 24,
axis_title_just = "cc") +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
)
high_sd <- rnorm(10000, 0, 2)
low_sd <- rnorm(10000, 0, .5)
d <- data.frame(label = "high_sd", value = high_sd)
d2 <- data.frame(label = "low_sd", value = low_sd)
sd_examples <- rbind(d, d2)
showtext_auto(enable = TRUE)
library(showtext)
high_sd <- rnorm(10000, 0, 2)
low_sd <- rnorm(10000, 0, .5)
d <- data.frame(label = "high_sd", value = high_sd)
d2 <- data.frame(label = "low_sd", value = low_sd)
sd_examples <- rbind(d, d2)
showtext_auto(enable = TRUE)
ggplot(
sd_examples,
aes(value, fill = label)) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_fill_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
theme_ft_rc(
base_size = 24,
axis_text_size = 24,
axis_title_size = 24,
plot_title_size = 30) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
theme(legend.title = element_blank())
library(tidyverse)
load("our_gss.rda")
library(sysfonts)
sysfonts::font_add_google("Roboto Condensed")
sysfonts::font_add("Arial Narrow", regular = "ARIALN.ttf")
library(showtext)
library(hrbrthemes)
library(tidyverse)
library(scales)
library(wesanderson)
high_sd <- rnorm(10000, 0, 2)
low_sd <- rnorm(10000, 0, .5)
d <- data.frame(label = "high_sd", value = high_sd)
d2 <- data.frame(label = "low_sd", value = low_sd)
sd_examples <- rbind(d, d2)
showtext_auto(enable = TRUE)
ggplot(
sd_examples,
aes(value, fill = label)) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_fill_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
theme_ft_rc(
base_size = 24,
axis_text_size = 24,
axis_title_size = 24,
plot_title_size = 30) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
theme(legend.title = element_blank())
high_sd <- rnorm(10000, 0, 2)
low_sd <- rnorm(10000, 0, .5)
d <- data.frame(label = "high_sd", value = high_sd)
d2 <- data.frame(label = "low_sd", value = low_sd)
sd_examples <- rbind(d, d2)
showtext_auto(enable = TRUE)
ggplot(
sd_examples,
aes(value, fill = label, color = label)) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_fill_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
theme_ft_rc(
base_size = 24,
axis_text_size = 24,
axis_title_size = 24,
plot_title_size = 30) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
theme(legend.title = element_blank())
ggplot(
sd_examples,
aes(value, color = label)) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_color_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
theme_ft_rc(
base_size = 24,
axis_text_size = 24,
axis_title_size = 24,
plot_title_size = 30) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
theme(legend.title = element_blank())
high_sd <- rnorm(10000, 0, 2)
low_sd <- rnorm(10000, 0, .5)
d <- data.frame(label = "high_sd", value = high_sd)
d2 <- data.frame(label = "low_sd", value = low_sd)
sd_examples <- rbind(d, d2)
showtext_auto(enable = TRUE)
ggplot(
sd_examples,
aes(value, fill = label, color = label)) +
geom_density() +
labs(title = "Comparing Low vs. High SD Distributions",
x = "Response value",
y = "Proportion of responses",
fill = "none") +
scale_fill_manual(values = c("orange", "brown"), labels = c("High SD", "Low SD" )) +
scale_color_manual(values = c("orange", "brown")) +
guides(color = "none") +
theme_ft_rc(
base_size = 24,
axis_text_size = 24,
axis_title_size = 24,
plot_title_size = 30) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
theme(legend.title = element_blank())
# Method for using Sturges's rule in bin calculation for ggplot
example <- our_gss
breaks <- pretty(range(example$realrinc, na.rm = TRUE),
n = nclass.Sturges(example$realrinc),
min.n = 1)
ggplot(our_gss, aes(realrinc)) +
geom_histogram(breaks = breaks) +
geom_vline(aes(xintercept = mean(realrinc, na.rm = TRUE), color = "mean")) +
geom_vline(aes(xintercept = median(realrinc, na.rm = TRUE), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
scale_x_continuous(labels = dollar_format()) +
theme_ft_rc(
base_size = 24,
axis_text_size = 24,
axis_title_size = 24,
plot_title_size = 30,
ticks = TRUE) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
labs(
title = "Income distribution of 2022 GSS Respondents",
x = "Respondent's income in dollars",
y = "Frequency") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
showtext_auto(enable = FALSE)
# Method for using Sturges's rule in bin calculation for ggplot
example <- our_gss
breaks <- pretty(range(example$realrinc, na.rm = TRUE),
n = nclass.Sturges(example$realrinc),
min.n = 1)
ggplot(our_gss, aes(realrinc)) +
geom_histogram(breaks = breaks) +
geom_vline(aes(xintercept = mean(realrinc, na.rm = TRUE), color = "mean")) +
geom_vline(aes(xintercept = median(realrinc, na.rm = TRUE), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
scale_x_continuous(
breaks = seq(0,150000,25000),
labels = dollar_format()) +
theme_ft_rc(
base_size = 24,
axis_text_size = 24,
axis_title_size = 24,
plot_title_size = 30,
ticks = TRUE) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
labs(
title = "Income distribution of 2022 GSS Respondents",
x = "Respondent's income in dollars",
y = "Frequency") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
showtext_auto(enable = FALSE)
# Method for using Sturges's rule in bin calculation for ggplot
example <- our_gss
breaks <- pretty(range(example$realrinc, na.rm = TRUE),
n = nclass.Sturges(example$realrinc),
min.n = 1)
ggplot(our_gss, aes(realrinc)) +
geom_histogram(breaks = breaks) +
geom_vline(aes(xintercept = mean(realrinc, na.rm = TRUE), color = "mean")) +
geom_vline(aes(xintercept = median(realrinc, na.rm = TRUE), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange", labels =c("Mean", "Median"))) +
guides(
)
scale_x_continuous(
labels = dollar_format()) +
theme_ft_rc(
base_size = 24,
axis_text_size = 24,
axis_title_size = 24,
plot_title_size = 30,
ticks = TRUE) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
labs(
title = "Income distribution of 2022 GSS Respondents",
x = "Respondent's income in dollars",
y = "Frequency") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
# Method for using Sturges's rule in bin calculation for ggplot
example <- our_gss
breaks <- pretty(range(example$realrinc, na.rm = TRUE),
n = nclass.Sturges(example$realrinc),
min.n = 1)
ggplot(our_gss, aes(realrinc)) +
geom_histogram(breaks = breaks) +
geom_vline(aes(xintercept = mean(realrinc, na.rm = TRUE), color = "mean")) +
geom_vline(aes(xintercept = median(realrinc, na.rm = TRUE), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange", labels =c("Mean", "Median"))) +
scale_x_continuous(
labels = dollar_format()) +
theme_ft_rc(
base_size = 24,
axis_text_size = 24,
axis_title_size = 24,
plot_title_size = 30,
ticks = TRUE) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
labs(
title = "Income distribution of 2022 GSS Respondents",
x = "Respondent's income in dollars",
y = "Frequency") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
showtext_auto(enable = FALSE)
# Method for using Sturges's rule in bin calculation for ggplot
example <- our_gss
breaks <- pretty(range(example$realrinc, na.rm = TRUE),
n = nclass.Sturges(example$realrinc),
min.n = 1)
ggplot(our_gss, aes(realrinc)) +
geom_histogram(breaks = breaks) +
geom_vline(aes(xintercept = mean(realrinc, na.rm = TRUE), color = "mean")) +
geom_vline(aes(xintercept = median(realrinc, na.rm = TRUE), color = "median"), linetype="dashed") +
scale_color_manual(name = "stat", values = c(mean = "brown", median = "orange")) +
scale_x_continuous(
labels = dollar_format()) +
theme_ft_rc(
base_size = 24,
axis_text_size = 24,
axis_title_size = 24,
plot_title_size = 30,
ticks = TRUE) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
labs(
title = "Income distribution of 2022 GSS Respondents",
x = "Respondent's income in dollars",
y = "Frequency") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
showtext_auto(enable = FALSE)
# Method for using Sturges's rule in bin calculation for ggplot
example <- our_gss
breaks <- pretty(range(example$realrinc, na.rm = TRUE),
n = nclass.Sturges(example$realrinc),
min.n = 1)
ggplot(our_gss, aes(realrinc)) +
geom_histogram(breaks = breaks) +
geom_vline(aes(xintercept = mean(realrinc, na.rm = TRUE), color = "mean")) +
geom_vline(aes(xintercept = median(realrinc, na.rm = TRUE), color = "median"), linetype="dashed") +
scale_color_manual(labels = c("Mean", "Median"), name = "stat", values = c(mean = "brown", median = "orange")) +
scale_x_continuous(
labels = dollar_format()) +
theme_ft_rc(
base_size = 24,
axis_text_size = 24,
axis_title_size = 24,
plot_title_size = 30,
ticks = TRUE) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
labs(
title = "Income distribution of 2022 GSS Respondents",
x = "Respondent's income in dollars",
y = "Frequency") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
showtext_auto(enable = FALSE)
mean(our_gss$realrinc)
mean(our_gss$realrinc, na.rm = TRUE)
mediann(our_gss$realrinc, na.rm = TRUE)
median(our_gss$realrinc, na.rm = TRUE)
# Method for using Sturges's rule in bin calculation for ggplot
example <- our_gss
breaks <- pretty(range(example$realrinc, na.rm = TRUE),
n = nclass.Sturges(example$realrinc),
min.n = 1)
ggplot(our_gss, aes(realrinc)) +
geom_histogram(breaks = breaks) +
geom_vline(aes(xintercept = mean(realrinc, na.rm = TRUE), color = "mean")) +
geom_vline(aes(xintercept = median(realrinc, na.rm = TRUE), color = "median"), linetype="dashed") +
scale_color_manual(labels = c("Mean ($27.8k)", "Median ($18.4k)"), name = "stat", values = c(mean = "brown", median = "orange")) +
scale_x_continuous(
labels = dollar_format()) +
theme_ft_rc(
base_size = 24,
axis_text_size = 24,
axis_title_size = 24,
plot_title_size = 30,
ticks = TRUE) +
theme(
plot.margin = unit(c(.25,.25,.25,.25), "cm")
) +
labs(
title = "Income distribution of 2022 GSS Respondents",
x = "Respondent's income in dollars",
y = "Frequency") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
showtext_auto(enable = FALSE)
load("~/git_repos/SOC300-Intro-R/our_gss.rda")
our_gss |>
summarize(
"Minimum" = min(realrinc, na.rm = TRUE),
"Median" = median(realrinc, na.rm = TRUE),
"Maximum" = max(realrinc, na.rm = TRUE),
"SD" = sd(realrinc, na.rm = TRUE)
)
library(tidyverse)
our_gss |>
summarize(
"Minimum" = min(realrinc, na.rm = TRUE),
"Median" = median(realrinc, na.rm = TRUE),
"Maximum" = max(realrinc, na.rm = TRUE),
"SD" = sd(realrinc, na.rm = TRUE)
)
library(gssr)
library(gssrdoc)
data(gss_all)
rm(gss_all)
gss_get_yr(year = 2022)
our_gss <- gss_get_yr(year = 2022)
our_gss <- gss_get_yr(2024)
our_gss <- gss_get_yr(2018)
our_gss <- gss_get_yr(2020)
our_gss <- gss_get_yr(2022)
# Running the following command will bring up a file explorer window. Navigate to the location of 'our_gss.rda' from the Moodlge page, and open the file
load(file.choose())
#Subset the data so that we can focus on a just a few variables of interest
cont_vars <- c("year", "id", "ballot", "age")
cat_vars <- c("race", "sex", "marsame1", "partyid", "marital")
wt_vars <- c("vpsu",
"vstrat",
"oversamp",
"formwt",              # weight to deal with experimental randomization
"wtssps",              # weight variable
"sampcode",            # sampling error code
"sample")              # sampling frame and method
my_vars <- c(cont_vars, cat_vars, wt_vars)
gss_mar <- gss_all |>
select(all_of(my_vars))
library(tidyverse)
gss_mar <- gss_all |>
select(all_of(my_vars))
#################################
#GSS Subsetting (not for class)
#################################
#Subset the data so that we can focus on a just a few variables of interest
cont_vars <- c("year", "id", "age")
cat_vars <- c("race", "sex", "realrinc", "educ", "partyid", "happy", "marital")
my_vars <- c(cont_vars, cat_vars)
our_gss <- our_gss |>
select(all_of(my_vars))
#Make sure all missing data is coded as NA
gss_sub <- gss_sub |>
mutate(across(everything(), haven::zap_missing))
#Make sure all missing data is coded as NA
our_gss <- our_gss |>
mutate(across(everything(), haven::zap_missing))
#Recode categorical variables into factors
our_gss <- our_gss |>
mutate(across(all_of(cat_vars), forcats::as_factor))
View(our_gss)
write.csv(our_gss, file = "C:\Users\selke\Desktop\Teaching\SOC 300 F 2025\our_gss.csv")
write.csv(our_gss, file = "C:/Users/selke/Desktop/Teaching/SOC 300 F 2025/our_gss.csv")
rm(our_gss)
our_gss <- read_csv("C:/Users/selke/Desktop/Teaching/SOc 300 F 2025/our_gss.csv")
View(our_gss)
our_gss[,-1]
our_gss <- our_gss[,-1]
str(our_gss)
our_gss$sex <- as.factor(our_gss$sex)
our_gss$race <- as.factor(our_gss$race)
View(our_gss)
our_gss <- our_gss[,-7]
levels(our_gss$happy)
our_gss$happy <- factor(
our_gss$happy,
levels = c("not too happy", "pretty happy", "very happy"),
ordered = TRUE
)
str(our_gss)
our_gss$partyid <- as.factor(our_gss$partyid)
our_gss$marital <- as.factor(our_gss$marital)
str(our_gss)
our_gss$id <- as.factor(our_gss$id)
str(our_gss)
save(our_gss, file="C:/Users/selke/Desktop/Teaching/SOC 300 F 2025/our_gss.rda")
gss_sub <- load("C:/Users/selke/Desktop/our_gss.rda")
gss_sub <- load("C:/Users/selke/Desktop/our_gss.rda")
gss_sub <- our_gss
rm(our_gss)
load("~/git_repos/SOC300-Intro-R/our_gss.rda")
mar_sub <- our_gss |>
select(id, marital)
View(mar_sub)
our_gss <- left_join(gss_sub, our_gss)
gss_sub$id <- as.factor(gss_sub$id)
our_gss <- left_join(gss_sub, our_gss)
View(our_gss)
save(our_gss, file = "our_gss.rda")
count(our_gss$marital)
count(our_gss$marital)
summary(our_gss$marital)
count(our_gss$marital)
count(our_gss$partyid)
# You can observe the response variables there, or you can run the following command
count(our_gss$marital)
