# Packages and the Tidyverse

R's open-source culture has encouraged a rich ecosystem of custom functions designed by scientists and researchers in the R userbase. These come in the form of 'packages', which are suites of several related functions. For example, there are packages for conducting statistical tests, producing data visualizations, generating publication-ready tables, and all manner of other tasks. 

## Loading Packages
Let's try this out with one of the better known R packages--'tidyverse'. This is actually a collection of several packages with a variety of interrelated functions for 'tidying', visualizing, and analyzing data. We will focus on what we need from 'tidyverse', but, if you're curious, you can read more here: [https://www.tidyverse.org/](https://www.tidyverse.org/)


If you're on a lab computer, this package may already be installed. Let's check by running the following command:
```{r}
library(tidyverse)
```

If you receive an error when you run this, you likely do not have the package installed on your system. This is also probably the case if you are on your personal device and only recently acquired R.

If you got an error, run the following command:
install.packages("tidyverse")

With a few exceptions, you will always install new packages in this fashion: install.packages("package_name")

After it's done installing, go back and run the library(tidyverse) command again. Note that you always need to do this for an added package. Whether you've had it for a while or just installed it, you need to load any outside package into your current session by placing its name in the library() function.
```{r}
library(tidyverse)
```

## Practice with Data Manipulation
Let's try bringing in a data frame to play with a few tidyverse functions. We'll use the load() function to bring in a subset of the General Social Survey, which contains a few variables from the 2022 survey wave. Run the following command and select the file "gss_sub.rda"

```{r, eval=FALSE, echo=TRUE}
load(file.choose())
```

The file.choose() function will open up a file-explorer window that allows you to manually select an R data file to load in. We'll talk about some other ways to import data files using R syntax next time.
