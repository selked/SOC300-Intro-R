# Factors

```{r, echo=FALSE}

p_id_vec<-c("p1", "p2", "p3", "p4", "p5")

interval_ratio_vec <- c(1.2, 3.4, 5.6, 7.1, 2.8)

ordinal_vec <- c("1-2", "5 or more", "1-2", "3-4", "5 or more") #When you want R to treat something as a character string (rather than as a command or an object of some kind), you place it in quotations.

nominal_vec <- c("east", "west", "south", "south", "north") 

logical_vec <- c(TRUE, FALSE, TRUE, FALSE, FALSE) #upper-case 'true' and 'false' have fixed values in R and, when used without quotes, will refer to these pre-defined logical values

our_df<-data.frame(
  p_id = p_id_vec, # a participant ID variable for each dog owner
  num_dogs = ordinal_vec, # a variable for the number of dogs each participant has
  side_of_town = nominal_vec, # the side of town each participant lives in
  food_per_day = interval_ratio_vec, # daily dog food amount in ounces
  has_a_labrador = logical_vec # a variable indicating whether a participant has a lab or not
)
```

Factors are often the best way to treat nominal and ordinal variables in R. Factors are a certain kind of vector that can only contain a number of pre-defined values. Each of these pre-defined values is considered a 'level' of the factor. So, we want side_of_town to be a factor variable with 4 levels: east, west, south, and north.

We can turn this variable into a factor variable with base R's as.factor() function.

```{r}
our_df$side_of_town <- as.factor(our_df$side_of_town)
```

Check the summary() output again and notice how the output is reported now

```{r}
summary(our_df)
```

Now, let's think about num_dogs. This should clearly be a factor variable as well. But, unlike food_per_day, the levels of this variable have a very clear order, from 1-2 to 5 or more.

The factor() function allows us to turn a vector into a factor, as well as manually specify the levels. Additionally, we can activate a process in the function letting it know that we want the order to matter.

```{r}
our_df$num_dogs <- factor(
  our_df$num_dogs, # the first input is the vector we are turning into a factor
  levels=c("1-2", "3-4", "5 or more"), # then we indicate the levels in the order that makes sense
  ordered = TRUE # and lastly we turn on a process that tells R that this order is important
  )
```

Take a look back at the summary. Now, instead of 5 separate character strings, we can see the breakdown of how many people own a certain number of dogs.

```{r}
summary(our_df)
```

Note that the str() command is also useful for quickly gleaning the various data types of variable columns within a data frame. It will show us our variable names, the data types, and then a preview of the first several values in each variable column.

We can also verify that num_dogs has been successfully re-coded as an ordered factor.

```{r}
str(our_df)
```

There are cases where you will want to convert a column like 'p_id' to a factor variable as well, but often we just need a variable like 'p_id' to serve as a searchable index for individual observations, so we can leave it be for now.

This is all part of the process of data cleaning, where we make sure our data is structured in a fashion that's amenable to analysis. This re-coding of variables is an essential component, and we'll see plenty more tasks in this vein when we work with GSS data later on.

For our last bit, let's learn a little bit about working with functions that don't come included in base R.
