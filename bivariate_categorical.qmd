# Bivariate: Categorical

Now that we know how to peek under the hood of our variables individually, it's time to start looking at them in combination. 

We will start with bivariate analysis, or the association between two variables. 

Let's begin with the procedure for categorical variables. We will start with the basic display of two categorical variables and then get some practice with the chi-squared test, which is a common statistical test that assumes both variables are categorical. 

We will learn to recognize associations in the contingency table, and then we'll use the chi-squared test to estimate the likelihood that the relationship we find is genuine or merely an artifact of random chance. 

## Contingency Tables
Also known as cross-tabulations---or crosstabs for short---contingency tables are quite similar to frequency tables. Rather than showing the distribution of a single variable, they show us the distribution of our dependent variable across the levels of our independent variable. 

Let's dig in with an example. We'll keep working with our GSS subset, so let's go ahead and set up our workspace by loading in our packages & data. We will need both `tidyverse` and `janitor` for this tutorial.
```{r, warning = FALSE, message = FALSE}
library(tidyverse)
library(janitor)
load("our_gss.rda")
```

### Creating our table
We'll set up a simple hypothesis to illustrate. Let's say that, based on theory, we predict a person's gender will impact their likelihood of identifying as a Democrat or a Republican.

Now, there's enough literature on gender and political affiliation that we would probably be justified in making a more specific hypothesis about the predicted direction of the association, but let's just say we simply predict that political-party affiliation will vary across categories of `sex`. 

This would be our alternative hypothesis, and its respective null hypothesis is that women and men are equally likely to identify with both political parties. 

In other words, the alternative hypothesis is that the proportion of men and women will be different across political parties. The null hypothesis is that there will be no such difference. 

We'll work with the `dem_rep` variable that we created when learning about variable re-coding, as well as the `sex` variable. 

Thankfully, we can use a familiar function in `tabyl()`, which we used to create our frequency table. We can simply add a second variable to produce a crosstab, though we will need to specify a couple of things so that the variables are properly formatted in terms of rows and columns.

```{r, eval = TRUE, echo = FALSE}
our_gss <- our_gss |>
  mutate(
    partyid_recoded=fct_collapse(partyid, 
"Democrat" = c("strong democrat", "not very strong democrat"),
"Republican" = c("strong republican","not very strong republican"),
"Independent" = c("independent, close to democrat", "independent (neither, no response)", "independent, close to republican"),
"Other Party" = c("other party")
))

our_gss <- our_gss |>
  mutate(dem_rep = fct_recode(
    partyid_recoded, 
    NULL="Other Party", 
    NULL="Independent"))
```

```{r}
our_gss |>
  drop_na(sex, dem_rep) |>
  tabyl(
    var1 = dem_rep,
    var2 = sex
  )
  
```
::: {.callout-caution}
Whenever you make a two-way crosstab like this, make sure that you always give your dependent variable as `var1` and your independent variable as `var2`. This will make sure your dependent variable appears as rows and your independent variable as columns, which makes everything much easier to parse for our purposes.
:::

Now, let's clean it up a little bit with the `adorn_()` functions like we did before.

First, let's add a `totals` row at the bottom, which will tell us how many respondents are in each category of the independent variable. Note that we always need to add `adorn_totals()` before all other `adorn_()` functions. It requires the raw counts as input, and these will be transformed by most other `adorn_()` functions, so we will get an error if we try to run `adorn_totals()` afterwards.

We'll give one input to `adorn_totals()`, which will be `where = "row"`, to indicate that we want the totals to appear as a row. 
```{r}
our_gss |>
  drop_na(sex, dem_rep) |>
  tabyl(
    var1 = dem_rep,
    var2 = sex) |>
  adorn_totals(where = "row")
```

Now, let's convert counts to proportions. Somewhat misleadingly, this is done with the `adorn_percentages()` function, and then we can add the `adorn_pct_formatting()` function to turn them into percentages proper.
```{r}
our_gss |>
  drop_na(sex, dem_rep) |>
  tabyl(
    var1 = dem_rep,
    var2 = sex) |>
  adorn_totals(where = "row") |>
  adorn_percentages() |>
  adorn_pct_formatting()
```

While percentages help give important context, it's important that we still complement the percentages with the raw numbers. Thankfully, we can add those back in alongside the percentages with `adorn_ns()`
```{r}
our_gss |>
  drop_na(sex, dem_rep) |>
  tabyl(
    var1 = dem_rep,
    var2 = sex) |>
  adorn_totals(where = "row") |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns(position = "front")
```
Great. For our final adornment, let's add some better labels for the variables. We'll use `adorn_title()` for this, and we'll supply `placement = top` to let the function know we want the labels on top of each variable column. Then we can provide custom label names with `row_name =` and `col_name =`.
```{r}
our_gss |>
  drop_na(sex, dem_rep) |>
  tabyl(
    var1 = dem_rep,
    var2 = sex) |>
  adorn_totals(where = "row") |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns(position = "rear") |>
  adorn_title(
    placement = "top",
    row_name = "Political Party",
    col_name = "Sex")

```
Great! Like our other visualizations, we'll clean this up a bit more later on, but this will do for now.

### Reading our table
Now that have our two-way crosstab, let's go ahead and think about what this means for our hypothesis. 
```{r, eval = TRUE, echo = FALSE}
our_gss |>
  drop_na(sex, dem_rep) |>
  tabyl(
    var1 = dem_rep,
    var2 = sex) |>
  adorn_totals(where = "row") |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns(position = "rear") |>
  adorn_title(
    placement = "top",
    row_name = "Political Party",
    col_name = "Sex")
```
Because our dependent variable makes up the rows, we can simply read across each row to get a sense of the patterns.

Reading across the Democrat row, we can see that about 60% of Dems are women, and about 40% of Dems are men. So, there a decent-sized difference there.

If we read across the Republican row, we can see that 47% are women compared to 53% men. This is not a big a difference as we see with Democrats, but, across both rows, it seems to be the case that women are more likely to be Democrats, and men are more likely to be Republicans

However, in order to test whether this apparent association is statistically significant, we need to make use of the chi-squared test.

## Chi-squared Test
```{r}
our_gss |>
  drop_na(sex, dem_rep) |>
  tabyl(
    var1 = dem_rep,
    var2 = sex) |>
  chisq.test()
```

```{r}
library(gtsummary)

our_gss |>
select(sex, dem_rep) |>
  drop_na() |>
  tbl_summary(
    by = sex,
    label = list(sex = "Sex", dem_rep = "Political Party")) |> 
  add_p()
  
```

